import java.util.Date;
import kotlin.collections.List;
import dev.thomasharris.claw.lib.lobsters.CommentStatus;

CREATE TABLE story (
    shortId TEXT NOT NULL UNIQUE PRIMARY KEY,
    title TEXT NOT NULL,
    createdAt INTEGER as Date NOT NULL,
    url TEXT NOT NULL,
    score INTEGER as Int NOT NULL,
    upvotes INTEGER as Int NOT NULL,
    downvotes INTEGER as Int NOT NULL,
    commentCount INTEGER as Int NOT NULL,
    description TEXT NOT NULL,
    username TEXT NOT NULL,
    tags TEXT as List<String> NOT NULL,
    pageIndex INTEGER as Int NOT NULL,
    pageSubIndex INTEGER as Int NOT NULL,
    insertedAt INTEGER as Date NOT NULL
);

CREATE TABLE user (
    username TEXT NOT NULL UNIQUE PRIMARY KEY,
    createdAt INTEGER as Date NOT NULL,
    isAdmin INTEGER as Boolean NOT NULL,
    about TEXT NOT NULL,
    isModerator INTEGER AS Boolean NOT NULL,
    karma INTEGER as Int NOT NULL,
    avatarShortUrl TEXT NOT NULL,
    invitedByUser TEXT NOT NULL,
    insertedAt INTEGER as Date NOT NULL
);

CREATE TABLE tag (
    tag TEXT NOT NULL UNIQUE PRIMARY KEY,
    id INTEGER as Int NOT NULL,
    description TEXT NOT NULL,
    privileged INTEGER as Boolean NOT NULL,
    isMedia INTEGER as Boolean NOT NULL,
    isInactive INTEGER as Boolean NOT NULL,
    hotnessMod REAL as Float NOT NULL
);

CREATE TABLE comment (
    shortId TEXT NOT NULL UNIQUE PRIMARY KEY,
    storyId TEXT NOT NULL,
    commentIndex INTEGER as Int NOT NULL,
    shortIdUrl TEXT NOT NULL,
    createdAt INTEGER as Date NOT NULL,
    updatedAt INTEGER as Date NOT NULL,
    isDeleted INTEGER as Boolean NOT NULL,
    isModerated INTEGER as Boolean NOT NULL,
    score INTEGER as Int NOT NULL,
    upvotes INTEGER as Int NOT NULL,
    downvotes INTEGER as Int NOT NULL,
    comment TEXT NOT NULL,
    indentLevel INTEGER as Int NOT NULL,
    username TEXT NOT NULL,
    insertedAt INTEGER as Date NOT NULL,
    status INTEGER as CommentStatus NOT NULL
);

CREATE VIEW storyModel AS
SELECT
    story.shortId,
    story.title,
    story.username,
    user.avatarShortUrl,
    story.createdAt,
    story.commentCount,
    story.score,
    story.url,
    story.tags,
    story.pageIndex,
    story.pageSubIndex,
    story.description
FROM story
JOIN user ON story.username = user.username
ORDER BY story.pageSubIndex;

CREATE VIEW tagModel AS
SELECT
    tag.tag,
    tag.isMedia
FROM tag;

CREATE VIEW commentModel AS
SELECT
    c.shortId,
    c.storyId,
    c.commentIndex,
    c.createdAt,
    c.updatedAt,
    c.isDeleted,
    c.isModerated,
    c.score,
    c.comment,
    c.indentLevel,
    c.username,
    user.avatarShortUrl,
    c.status,
    -- haha yes
    (
        WITH comments AS (
            SELECT shortId, commentIndex, indentLevel
            FROM comment
            WHERE comment.storyId = c.storyId
        ), tail AS (
            SELECT commentIndex, indentLevel
            FROM comments
            WHERE comments.commentIndex > c.commentIndex
        ), next AS (
            SELECT commentIndex
            FROM tail
            WHERE tail.indentLevel <= c.indentLevel
            LIMIT 1
        ), children AS (
            SELECT comments.shortId
            FROM comments, next
            WHERE comments.commentIndex > c.commentIndex
                AND comments.commentIndex < next.commentIndex
        )
        SELECT count(*) FROM children
    ) childCount
FROM comment c
LEFT JOIN user ON c.username = user.username;

-- Story methods
insertStory:
INSERT OR REPLACE INTO story VALUES ?;

getPage:
SELECT * FROM storyModel WHERE pageIndex = :pageIndex ORDER BY pageIndex, pageSubIndex;

getOldestStory:
SELECT min(insertedAt) FROM story WHERE pageIndex = :pageIndex;

getStoryModel:
SELECT * FROM storyModel WHERE shortId = :shortId;

getStory:
SELECT * FROM story WHERE shortId = :shortId;


-- user methods
insertUser:
INSERT OR REPLACE INTO user VALUES ?;


-- misc
clear:
DELETE FROM story;


-- tag methods
insertTag:
INSERT OR REPLACE INTO tag VALUES ?;

getTagModels:
SELECT * FROM tagModel;


-- comment methods
insertComment:
INSERT OR REPLACE INTO comment VALUES ?;

getOldestComment:
SELECT min(insertedAt) FROM comment WHERE storyId = :storyId;

getVisibleCommentModels:
SELECT * FROM commentModel WHERE storyId = :storyId AND status < 2 ORDER BY commentIndex;

setStatus:
UPDATE comment SET status = :status WHERE shortId = :shortId;

getCommentStatus:
SELECT status FROM comment WHERE shortId = :shortId;

setChildrenStatus:
WITH parent AS (
    SELECT storyId, commentIndex, indentLevel FROM commentModel WHERE shortId = :commentId
), comments AS (
    SELECT commentModel.shortId, commentModel.commentIndex, commentModel.indentLevel, commentModel.status
    FROM commentModel, parent
    WHERE commentModel.storyId = parent.storyId
    ORDER BY commentModel.commentIndex
), tail AS (
    SELECT comments.shortId, comments.commentIndex, comments.indentLevel
    FROM comments, parent
    WHERE comments.commentIndex > parent.commentIndex
), next AS (
    SELECT tail.commentIndex
    FROM tail, parent
    WHERE tail.indentLevel <= parent.indentLevel LIMIT 1
), hasNext AS (
    SELECT count(*) c FROM next
), children AS (
    SELECT tail.shortId
    FROM tail, hasNext
    LEFT JOIN next ON tail.commentIndex < next.commentIndex
    WHERE (hasNext.c == 0 AND next.commentIndex IS NULL) OR (hasNext.c > 0 AND tail.commentIndex < next.commentIndex)
) UPDATE comment SET status = :status WHERE shortId IN (SELECT shortId FROM children);

getParent:
WITH target AS (
    SELECT storyId, commentIndex, indentLevel
    FROM commentModel
    WHERE shortId = :shortId
) SELECT commentModel.shortId
FROM commentModel, target
WHERE commentModel.storyId = target.storyId
    AND commentModel.commentIndex < target.commentIndex
    AND commentModel.indentLevel < target.indentLevel
ORDER BY commentModel.commentIndex DESC
LIMIT 1;

getPredecessors:
WITH target AS (
    SELECT storyId, commentIndex, indentLevel
    FROM commentModel
    WHERE shortId = :shortId
), parent AS (
    SELECT commentModel.commentIndex
    FROM commentModel, target
    WHERE commentModel.storyId = target.storyId
        AND commentModel.commentIndex < target.commentIndex
        AND commentModel.indentLevel < target.indentLevel
    ORDER BY commentModel.commentIndex DESC
    LIMIT 1
), hasParent AS (
    SELECT count(*) c FROM parent
) SELECT commentModel.shortId
FROM commentModel, hasParent, target
LEFT JOIN parent
WHERE commentModel.storyId = target.storyId
    AND commentModel.indentLevel = target.indentLevel
    AND commentModel.commentIndex < target.commentIndex
    AND ((hasParent.c == 0 AND parent.commentIndex IS NULL)
        OR (hasParent.c > 0 AND commentModel.commentIndex > parent.commentIndex));