import java.util.Date;
import kotlin.collections.List;

CREATE TABLE story (
    shortId TEXT NOT NULL UNIQUE PRIMARY KEY,
    title TEXT NOT NULL,
    createdAt INTEGER as Date NOT NULL,
    url TEXT NOT NULL,
    score INTEGER as Int NOT NULL,
    upvotes INTEGER as Int NOT NULL,
    downvotes INTEGER as Int NOT NULL,
    commentCount INTEGER as Int NOT NULL,
    description TEXT NOT NULL,
    username TEXT NOT NULL,
    tags TEXT as List<String> NOT NULL,
    pageIndex INTEGER as Int NOT NULL,
    pageSubIndex INTEGER as Int NOT NULL,
    insertedAt INTEGER as Date NOT NULL
);

CREATE TABLE user (
    username TEXT NOT NULL UNIQUE PRIMARY KEY,
    createdAt INTEGER as Date NOT NULL,
    isAdmin INTEGER as Boolean NOT NULL,
    about TEXT NOT NULL,
    isModerator INTEGER AS Boolean NOT NULL,
    karma INTEGER as Int NOT NULL,
    avatarShortUrl TEXT NOT NULL,
    invitedByUser TEXT NOT NULL,
    insertedAt INTEGER as Date NOT NULL
);

CREATE TABLE tag (
    tag TEXT NOT NULL UNIQUE PRIMARY KEY,
    id INTEGER as Int NOT NULL,
    description TEXT NOT NULL,
    privileged INTEGER as Boolean NOT NULL,
    isMedia INTEGER as Boolean NOT NULL,
    isInactive INTEGER as Boolean NOT NULL,
    hotnessMod REAL as Float NOT NULL
);

CREATE TABLE comment (
    shortId TEXT NOT NULL UNIQUE PRIMARY KEY,
    storyId TEXT NOT NULL,
    commentIndex INTEGER as Int NOT NULL,
    shortIdUrl TEXT NOT NULL,
    createdAt INTEGER as Date NOT NULL,
    updatedAt INTEGER as Date NOT NULL,
    isDeleted INTEGER as Boolean NOT NULL,
    isModerated INTEGER as Boolean NOT NULL,
    score INTEGER as Int NOT NULL,
    upvotes INTEGER as Int NOT NULL,
    downvotes INTEGER as Int NOT NULL,
    comment TEXT NOT NULL,
    indentLevel INTEGER as Int NOT NULL,
    username TEXT NOT NULL,
    insertedAt INTEGER as Date NOT NULL
);

CREATE VIEW storyModel AS
SELECT
    story.shortId,
    story.title,
    story.username,
    user.avatarShortUrl,
    story.createdAt,
    story.commentCount,
    story.score,
    story.url,
    story.tags,
    story.pageIndex,
    story.pageSubIndex,
    story.insertedAt,
    story.description
FROM story
JOIN user ON story.username = user.username
ORDER BY story.pageSubIndex;

CREATE VIEW tagModel AS
SELECT
    tag.tag,
    tag.isMedia
FROM tag;

CREATE VIEW commentModel AS
SELECT
    comment.shortId,
    comment.storyId,
    comment.commentIndex,
    comment.createdAt,
    comment.updatedAt,
    comment.isDeleted,
    comment.isModerated,
    comment.score,
    comment.comment,
    comment.indentLevel,
    comment.username,
    comment.insertedAt,
    user.avatarShortUrl
FROM comment
LEFT JOIN user ON comment.username = user.username;


-- Story methods
insertStory:
INSERT OR REPLACE INTO story VALUES ?;

getPage:
SELECT * FROM storyModel WHERE pageIndex = :pageIndex ORDER BY pageIndex, pageSubIndex;

getStoryModel:
SELECT * FROM storyModel WHERE shortId = :shortId;

getStory:
SELECT * FROM story WHERE shortId = :shortId;


-- user methods
insertUser:
INSERT OR REPLACE INTO user VALUES ?;


-- misc
clear:
DELETE FROM story;


-- tag methods
insertTag:
INSERT OR REPLACE INTO tag VALUES ?;

getTagModels:
SELECT * FROM tagModel;


-- comment methods
insertComment:
INSERT OR REPLACE INTO comment VALUES ?;

getCommentModels:
SELECT * FROM commentModel WHERE storyId = :storyId ORDER BY commentIndex;